@{
    var carts = (List<DTOs.CartDTO.CartDTO>)ViewBag.CartItems;
    var products = (List<DTOs.ProductDTO.ReadProductDTO>)ViewBag.Products;
    var totalCartCount = (int)ViewBag.TotalCartCount; // Thêm biến này từ Controller
}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BakeryShop</title>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

    @* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"> *@

    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


    <link rel="stylesheet" href="~/css/Cart.css" asp-append-version="true">
</head>

<body>
    <div class="hero" style="color: #fff">
        <h1 class="header-cart text-center">CART</h1>
        <div class="breadcrumb-container d-flex justify-content-center">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item">
                        <a class="nav-link" asp-controller="Home" asp-action="Index">Home</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page" style="color: #fff">Cart</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="container my-5">

        @if (ViewBag.CartWarnings != null)
        {
            foreach (var warning in (List<string>)ViewBag.CartWarnings)
            {
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    @Html.Raw(warning)
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        }

        <div class="d-flex justify-content-end align-items-center mb-3">
            <button id="toggleEditModeBtn" class="btn btn-warning custom-btn-secondary" type="button">Update Quantity</button>
            <button type="submit" id="submitUpdateBtn" class="btn btn-success custom-btn-primary" style="display: none;">Confirm Update</button>
            <button type="button" id="cancelUpdateBtn" class="btn btn-secondary custom-btn-secondary ms-2" style="display: none;">Cancel Update</button>
        </div>
        <table id="cartTable" class="table table-striped cart-table" data-user-id="@ViewData["UserID"]">
            <thead>
                <tr>
                    <th class="text-center cart-col-select">Select</th>
                    <th class="text-center cart-col-remove">Remove</th>
                    <th class="text-center">Product</th>
                    <th class="text-center">Product Name</th>
                    <th class="text-center">Price</th>
                    <th class="text-center">Quantity</th>
                    <th class="text-center">Subtotal</th>
                    <th class="text-center">Last Updated</th>
                </tr>
            </thead>
            <tbody>
                @if (carts != null && products != null && carts.Any())
                {
                    for (int i = 0; i < carts.Count; i++)
                    {
                        var cart = carts[i];
                        var product = products[i];

                        <tr data-cart-id="@cart.CartID">
                            <td class="text-center">
                                <input type="checkbox" class="cart-checkbox" value="@cart.CartID">
                            </td>
                            <td class="text-center">
                                <button type="button" class="btn btn-link p-0 remove-btn" data-cartid="@cart.CartID" title="Remove item from cart">
                                    <i class="fas fa-trash-alt text-danger"></i>
                                </button>
                            </td>
                            <td class="text-center">
                                <img src="~/@product.ImageURL" class="product-image rounded" alt="@product.ProductName" width="80" height="80">
                            </td>
                            <td class="text-center">@product.ProductName</td>
                            <td class="price text-center">@product.Price.ToString("C")</td>
                            <td class="text-center">
                                <input type="hidden" name="updates[@i].CartID" value="@cart.CartID" />
                                <input type="number" name="updates[@i].Quantity" value="@cart.Quantity" class="quantity-input form-control mx-auto"
                                       min="1" max="@product.StockQuantity" readonly required>
                            </td>
                            <td class="subtotal text-center">@((product.Price * cart.Quantity).ToString("C"))</td>
                            <td class="last-updated text-center">@cart.LastUpdated.ToString("dd/MM/yyyy HH:mm")</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8" class="text-center py-5 empty-cart-row">
                            <p class="lead">Your cart is currently empty. <a asp-controller="Home" asp-action="Index">Start shopping now!</a></p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (totalCartCount > carts.Count())
        {
            <div class="text-center mt-3" id="loadMoreContainer">
                <button id="loadMoreBtn" class="btn btn-info">Load More</button>
            </div>
        }


        <form method="post" asp-controller="Cart" asp-action="CheckOut" id="checkoutForm">
            <div id="selectedCartInputs"></div>
            <div class="d-flex justify-content-end mt-4">
                <button type="submit" id="checkoutBtn" class="btn btn-lg custom-btn-checkout">CHECK OUT SELECTED ITEMS</button>
            </div>
        </form>
    </div>

    @* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script> *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://localhost:7126/notificationHub") // Điều chỉnh đúng URL của Hub
            .withAutomaticReconnect()
            .build();

        connection.start().then(() => {
            console.log("Connected to SignalR for Cart Listening");
        });

        connection.on("CartChanged", () => {
            console.log("Real-time: CartChanged event received");
            location.reload(); // hoặc gọi hàm `loadCartItems()` nếu ông dùng AJAX
        });
    </script>
    <script>
        $(document).ready(function () {
            let skip = @carts.Count;
            const take = 5;

            // Function to calculate and update subtotal for a row
            function updateSubtotal(row) {
                let price = parseFloat(row.find('.price').text().replace(/[^0-9.-]+/g, ""));
                let quantity = parseInt(row.find('.quantity-input').val());
                let subtotal = price * quantity;
                row.find('.subtotal').text(subtotal.toLocaleString('en-US', { style: 'currency', currency: 'USD' }));
            }

            // Initial calculation for all subtotals
            $('#cartTable tbody tr').each(function () {
                if (!$(this).hasClass('empty-cart-row')) {
                    updateSubtotal($(this));
                    let originalQuantity = $(this).find('.quantity-input').val();
                    // Store original quantity using .data()
                    $(this).find('.quantity-input').data('original-quantity', originalQuantity);
                }
            });

            // Toggle Edit Mode
            $("#toggleEditModeBtn").click(function () {
                let isReadonly = $(".quantity-input").prop("readonly");
                if (isReadonly) {
                    $(".quantity-input").prop("readonly", false);
                    $(this).hide();
                    $("#submitUpdateBtn").show();
                    $("#cancelUpdateBtn").show();
                }
            });

            // Handle Cancel Update button click
            $("#cancelUpdateBtn").click(function () {
                $(".quantity-input").prop("readonly", true);

                $('#cartTable tbody tr').each(function () {
                    if (!$(this).hasClass('empty-cart-row')) {
                        // Revert to original quantity
                        let originalQuantity = $(this).find('.quantity-input').data('original-quantity');
                        $(this).find('.quantity-input').val(originalQuantity);
                        updateSubtotal($(this));
                    }
                });

                $("#toggleEditModeBtn").show();
                $("#submitUpdateBtn").hide();
                $(this).hide();
            });

            // Handle Confirm Update button click (AJAX submission)
            $("#submitUpdateBtn").click(function () {
                let updates = [];

                $("#cartTable tbody tr").each(function () {
                    // Exclude the "empty cart" row if it exists
                    if ($(this).hasClass('empty-cart-row')) {
                        return true; // continue to the next iteration
                    }

                    let cartId = $(this).find("input[name*='CartID']").val();
                    let quantityInput = $(this).find(".quantity-input");
                    let newQuantity = parseInt(quantityInput.val());
                    let originalQuantity = parseInt(quantityInput.data('original-quantity'));

                    // Only add to updates if the quantity has changed
                    if (newQuantity !== originalQuantity) {
                        updates.push({
                            cartID: parseInt(cartId),
                            quantity: newQuantity
                        });
                    }
                });

                if (updates.length === 0) {
                    alert("No quantities have changed to update.");
                    // Revert UI to initial state if there's nothing to update
                    $(".quantity-input").prop("readonly", true);
                    $("#toggleEditModeBtn").show();
                    $("#submitUpdateBtn").hide();
                    $("#cancelUpdateBtn").hide();
                    return;
                }

                $.ajax({
                    type: "POST",
                    url: "/Cart/UpdateQuantity",
                    contentType: "application/json",
                    data: JSON.stringify(updates),
                    headers: {
                        "Accept": "application/json"
                    },
                    success: function (res) {
                        if (res.success) {
                            alert("Quantities updated successfully!");

                            // Update each row's subtotal and last updated time for only the updated items
                            updates.forEach(function(updatedItem) {
                                let row = $(`#cartTable tbody tr[data-cart-id="${updatedItem.cartID}"]`);
                                if (row.length) {
                                    let quantityInput = row.find('.quantity-input');
                                    quantityInput.val(updatedItem.quantity); // Update the quantity input itself
                                    quantityInput.data('original-quantity', updatedItem.quantity); // Update original quantity for future cancels
                                    updateSubtotal(row);

                                    // Update Last Updated column
                                    let now = new Date();
                                    let formattedDate = now.getDate().toString().padStart(2, '0') + '/' +
                                                        (now.getMonth() + 1).toString().padStart(2, '0') + '/' +
                                                        now.getFullYear() + ' ' +
                                                        now.getHours().toString().padStart(2, '0') + ':' +
                                                        now.getMinutes().toString().padStart(2, '0');
                                    row.find('.last-updated').text(formattedDate);
                                }
                            });

                            // Reset UI to readonly mode
                            $(".quantity-input").prop("readonly", true);
                            $("#toggleEditModeBtn").show();
                            $("#submitUpdateBtn").hide();
                            $("#cancelUpdateBtn").hide();
                        } else {
                            alert("Update failed: " + res.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        alert("An error occurred during update: " + xhr.responseText);
                    }
                });
            });

            // Update subtotal when quantity changes in edit mode
                    $(document).on('input', '.quantity-input', function () {
            const $input = $(this);
            const row = $input.closest('tr');
            const min = parseInt($input.attr('min'));
            const max = parseInt($input.attr('max'));
            let val = parseInt($input.val());

            if (isNaN(val)) {
                val = min;
            } else if (val < min) {
                val = min;
            } else if (val > max) {
                val = max;
            }

            $input.val(val); // set lại giá trị đúng giới hạn
            updateSubtotal(row);
        });


            $("#checkoutForm").submit(function (e) {
                e.preventDefault();
                let selectedCartIds = [];
                $(".cart-checkbox:checked").each(function () {
                    selectedCartIds.push($(this).val());
                });
                if (selectedCartIds.length === 0) {
                    alert("Please choose at least one product to checkout.");
                    return;
                }
                $("#selectedCartInputs").empty();
                selectedCartIds.forEach(id => {
                    $("#selectedCartInputs").append(`<input type="hidden" name="cartIds" value="${id}">`);
                });
                console.log("List Cart ID: ", selectedCartIds);
                this.submit();
            });

            // Logic for removing items
            $(document).on('click', ".remove-btn", function (e) {
                e.preventDefault();
                let cartID = $(this).data("cartid");
                const rowToRemove = $(this).closest('tr'); // Get the row to remove

                if (confirm("Are you sure you want to remove this product from your cart?")) {
                    $.post("/Cart/RemoveFromCart", { cartID: cartID }, function () {
                        rowToRemove.remove(); // Remove the row from the table
                        if ($('#cartTable tbody tr').not('.empty-cart-row').length === 0) {
                            $('#cartTable tbody').append(`
                                <tr class="empty-cart-row">
                                    <td colspan="8" class="text-center py-5">
                                        <p class="lead">Your cart is currently empty. <a href="/Home/Index">Start shopping now!</a></p>
                                    </td>
                                </tr>`);
                            $("#loadMoreContainer").hide();
                        }
                    }).fail(function(xhr, status, error) {
                        alert("Failed to remove item: " + xhr.responseText);
                    });
                }
            });

            // Logic for Load More button
            $("#loadMoreBtn").click(function () {
                const userId = $("#cartTable").data("user-id");
                $.ajax({
                    url: `/Cart/LoadMoreCartItems?skip=${skip}&take=${take}`,
                    type: "GET",
                    success: function (data) {
                        if (data && data.cartItems && data.cartItems.length > 0) {
                            // Remove empty cart row if it exists before appending new items
                            $('.empty-cart-row').remove();

                            let newRowsHtml = "";
                            data.cartItems.forEach(function (cartItem, index) {
                                let product = data.products.find(p => p.productID === cartItem.productID);
                                if (product) {
                                    const subtotal = product.price * cartItem.quantity;
                                    // Format last updated date consistently
                                    let lastUpdatedDate = new Date(cartItem.lastUpdated);
                                    let formattedLastUpdated = lastUpdatedDate.getDate().toString().padStart(2, '0') + '/' +
                                                               (lastUpdatedDate.getMonth() + 1).toString().padStart(2, '0') + '/' +
                                                               lastUpdatedDate.getFullYear() + ' ' +
                                                               lastUpdatedDate.getHours().toString().padStart(2, '0') + ':' +
                                                               lastUpdatedDate.getMinutes().toString().padStart(2, '0');

                                    newRowsHtml += `
                                        <tr data-cart-id="${cartItem.cartID}">
                                            <td class="text-center">
                                                <input type="checkbox" class="cart-checkbox" value="${cartItem.cartID}">
                                            </td>
                                            <td class="text-center">
                                                <button type="button" class="btn btn-link p-0 remove-btn" data-cartid="${cartItem.cartID}" title="Remove item from cart">
                                                    <i class="fas fa-trash-alt text-danger"></i>
                                                </button>
                                            </td>
                                            <td class="text-center">
                                                <img src="/${product.imageURL}" class="product-image rounded" alt="${product.productName}" width="80" height="80">
                                            </td>
                                            <td class="text-center">${product.productName}</td>
                                            <td class="price text-center">${product.price.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}</td>
                                            <td class="text-center">
                                                <input type="hidden" name="updates[${skip + index}].CartID" value="${cartItem.cartID}" />
                                                <input type="number" name="updates[${skip + index}].Quantity" value="${cartItem.quantity}" class="quantity-input form-control mx-auto"
                                                        min="1" max="${product.stockQuantity}" readonly required>
                                            </td>
                                            <td class="subtotal text-center">${subtotal.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}</td>
                                            <td class="last-updated text-center">${formattedLastUpdated}</td>
                                        </tr>
                                    `;
                                }
                            });
                            $('#cartTable tbody').append(newRowsHtml);
                            skip += data.cartItems.length;

                            // Initialize subtotal and data-original-quantity for newly loaded rows
                            $('#cartTable tbody tr').slice(-data.cartItems.length).each(function() {
                                updateSubtotal($(this));
                                let originalQuantity = $(this).find('.quantity-input').val();
                                $(this).find('.quantity-input').data('original-quantity', originalQuantity);
                            });

                            if (skip >= data.totalCartCount) {
                                $("#loadMoreContainer").hide();
                            }
                        } else {
                            $("#loadMoreContainer").hide();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading more cart items:", error);
                    }
                });
            });
        });
    </script>
</body>