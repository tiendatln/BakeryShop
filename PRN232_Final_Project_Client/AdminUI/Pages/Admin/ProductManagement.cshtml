@page
@model AdminUI.Pages.Admin.ProductManagementModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Product Management";
}
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
@* <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet"> *@
<style>
    .search-container {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 25px;
        max-width: 900px;
        margin: 0 auto;
    }

    .input-group-text {
        background: #007bff;
        border: none;
        color: white;
    }

    .form-control, .form-select {
        border: 1px solid #ddd;
        padding: 10px 12px;
    }

        .form-control:focus, .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
        }

    .input-group .form-control {
        border-left: none;
    }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-box"></i> Product Management
                    </h3>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productModal" onclick="clearForm()">
                        <i class="fas fa-plus"></i> Add Product
                    </button>
                </div>
                <div class="card-body">
                    <!-- Search and Filter -->
                    <form method="GET" id="search" style="padding: 15px;">
                        <div class="form-section">
                            <div class="row">
                                <div class="col-md-6">
                                    <label for="searchInput" class="form-label">
                                        <i class="fas fa-box me-1"></i>
                                        Product Name
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-search"></i>
                                        </span>
                                        <input type="text" class="form-control" id="searchInput" name="search" placeholder="Enter product name...">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label for="categoryFilter" class="form-label">
                                        <i class="fas fa-tags me-1"></i>
                                        Category
                                    </label>
                                    <select class="form-select" id="categoryFilter" name="category">
                                  
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="form-section">
                            <div class="row">
                                <div class="col-md-4">
                                    <label for="statusFilter" class="form-label">
                                        <i class="fas fa-clipboard-check me-1"></i>
                                        Stock Status
                                    </label>
                                    <select class="form-select" id="statusFilter" name="status">
                                        <option value="0">All Status</option>
                                        <option value="1">In Stock</option>
                                        <option value="2">Out of Stock</option>
                                        <option value="low_stock">Low Stock</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label for="minPrice" class="form-label">
                                        <i class="fas fa-dollar-sign me-1"></i>
                                        Min Price
                                    </label>
                                    <input type="number" class="form-control" id="minPrice" name="min_price" placeholder="0" min="0" step="0.01">
                                </div>
                                <div class="col-md-4">
                                    <label for="maxPrice" class="form-label">
                                        <i class="fas fa-dollar-sign me-1"></i>
                                        Max Price
                                    </label>
                                    <input type="number" class="form-control" id="maxPrice" name="max_price" placeholder="1000" min="0" step="0.01">
                                </div>
                            </div>
                        </div>
                    </form>

                    <!-- Products Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>No.</th>
                                    <th>Image</th>
                                    <th>Product Name</th>
                                    <th>Category</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                            <tbody id="productTableBody">
                                <!--List Product-->
                            </tbody>
                        </table>
                    </div>
                    <nav>
                        <ul class="pagination justify-content-center"></ul>
                    </nav>

                </div>
            </div>
        </div>
    </div>
</div>

<!-- Product Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="productForm" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel">Add New Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="productId" name="ProductID">

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="productName" name="ProductName" required maxlength="100">
                                <div class="invalid-feedback">Please enter product name (max 100 characters)</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="categoryId" class="form-label">Category <span class="text-danger">*</span></label>
                                <select class="form-select" id="categoryId" name="CategoryID" required>

                                    <!-- Categories will be populated here -->
                                </select>
                                <div class="invalid-feedback">Please select a category</div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="Description" rows="3" maxlength="255"></textarea>
                        <div class="form-text">Maximum 255 characters</div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="price" class="form-label">Price <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="price" name="Price" step="0.01" min="0.01" required>
                                </div>
                                <div class="invalid-feedback">Please enter a valid price (> 0)</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="stockQuantity" class="form-label">Stock Quantity <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="stockQuantity" name="StockQuantity" min="0" required>
                                <div class="invalid-feedback">Please enter a valid quantity (>= 0)</div>
                            </div>
                        </div>
                        <div class="col-md-3"">
                            <div class="mb-3">
                                <label for="createdDate" class="form-label">Created Date <span class="text-danger">*</span></label>
                                <input type="datetime" class="form-control" id="createdDate" name="CreatedDate" readonly>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="imageFile" class="form-label">Upload Image</label>
                        <input type="file" class="form-control" id="imageFile" name="ImageFile" accept="image/*">
                        <div class="form-text">Choose product image from your device</div>
                    </div>


                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isAvailable" name="IsAvailable" checked>
                            <label class="form-check-label" for="isAvailable">
                                Product Available
                            </label>
                        </div>
                    </div>

                    <!-- Image Preview -->
                    <div id="imagePreview" class="mb-3" style="display: none;">
                        <label class="form-label">Image Preview:</label>
                        <div>
                            <img id="previewImg" src="" alt="Preview" class="img-thumbnail" style="max-width: 200px; max-height: 200px;">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Product
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Product Modal -->
<div class="modal fade" id="viewProductModal" tabindex="-1" aria-labelledby="viewProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewProductModalLabel">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="viewProductContent">
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .table th {
        border-top: none;
        font-weight: 600;
    }

    .btn-group .btn {
        margin-right: 2px;
    }

        .btn-group .btn:last-child {
            margin-right: 0;
        }

    .img-thumbnail {
        border-radius: 0.375rem;
    }

    .badge {
        font-size: 0.75em;
    }

    .modal-lg {
        max-width: 800px;
    }

    .invalid-feedback {
        display: block;
    }

    .form-control:invalid {
        border-color: #dc3545;
    }

    .form-control:valid {
        border-color: #198754;
    }
</style>

<script>
    
    const env_img = '@Environment.GetEnvironmentVariable("ENV_PRODUCT_IMG")';
        $(document).ready(function () {
     var page = sessionStorage.getItem('currentPage') || 1;
        if (isNaN(page) || page < 1) {
            loadProducts(1);
        } else {
            loadProducts(1);
        }
    });

    // Search and filter functionality
    $('#searchInput, #categoryFilter, #statusFilter, #minPrice, #maxPrice').on('input change', function () {
        showLoading();
        loadProducts(1); // Load first page on search/filter change
    });

    // Load products with pagination
    function loadProducts(page) {
        $.ajax({
            url: '?handler=SearchProducts',
            type: 'GET',
            data: {
                searchTerm: $('#searchInput').val(),
                categoryId: $('#categoryFilter').val(),
                status: $('#statusFilter').val(),
                minPrice: $('#minPrice').val(),
                maxPrice: $('#maxPrice').val(),
                pageNumber: page,
            },
            success: function (data) {
                console.log(page);
                const container = $('#productTableBody');
                renderProducts(data.value, container);
                const mathPage = Math.ceil(data["@@odata.count"] / 10); 
                renderPagination(mathPage, page);
            },
            error: function () {
                console.error('Failed to load products.');
            }
        });
    }
    function showLoading() {
            $('#productTableBody').html(`
                <div class="col-12 text-center">
                    <div style="padding: 4rem 2rem;">
                        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3 text-muted">Loading amazing products...</p>
                    </div>
                </div>
            `);
        }
    // Render products in table
    function renderProducts(data, container) {
        container.empty();

        if (!data || data.length === 0) {
            container.append(`
                <tr>
                    <td colspan="8" class="text-center">
                        <div style="padding: 4rem 2rem; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-radius: 24px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);">
                            <i class="fas fa-search" style="font-size: 4rem; color: #cbd5e0; margin-bottom: 2rem;"></i>
                            <h3 style="color: #4a5568; font-family: 'Playfair Display', serif; margin-bottom: 1rem;">No products found</h3>
                            <p style="color: #718096;">Try adjusting your search or browse different categories</p>
                        </div>
                    </td>
                </tr>
            `);
            return;
        }

        // Load categories to map category names
        $.ajax({
            url: '/Category?handler=AllCategory',
            type: 'GET',
            success: function(categories) {
                const categoryMap = categories.reduce((map, category) => {
                    map[category.categoryID] = category.categoryName;
                    return map;
                }, {});
                renderProductRows(data, container, categoryMap);
            },
            error: function() {
                console.error('Failed to load categories.');
            }
        });
    }

    // Render individual product rows
    function renderProductRows(data, container, categoryMap) {
        container.empty();
        var No = 1;
        data.forEach(product => {
            // Map category name if not already present
            if (!product.CategoryName && categoryMap[product.CategoryID]) {
                product.CategoryName = categoryMap[product.CategoryID];
            }

            const imageHtml = product.ImageURL
                ? `<img src="${env_img}${env_img}${product.ImageURL}" class="img-thumbnail" style="width:50px;height:50px;" alt="${product.ProductName}">`
                : `<div class="bg-light text-center d-flex align-items-center justify-content-center" style="width:50px;height:50px;">
                     <i class="fas fa-image text-muted"></i>
                   </div>`;

            const html = `
                <tr>
                    <td>${No}</td>
                    <td>${imageHtml}</td>
                    <td><strong>${product.ProductName}</strong></td>
                    <td>${product.CategoryName || 'N/A'}</td>
                    <td class="text-success fw-bold">$${product.Price}</td>
                    <td>
                        <span class="badge ${product.StockQuantity > 5 ? "bg-success" : "bg-danger"}">
                            ${product.StockQuantity}
                        </span>
                    </td>
                    <td>
                        <span class="badge ${product.IsAvailable ? "bg-success" : "bg-secondary"}">
                            ${product.IsAvailable ? "In Stock" : "Out of Stock"}
                        </span>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="viewProduct(${product.ProductID})"
                                    title="View Details">
                                <i class="fas fa-eye"></i> Details
                            </button>
                            <button class="btn btn-outline-warning" onclick="editProduct(${product.ProductID})"
                                    title="Edit Product">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                                <button class="btn btn-outline-danger" onclick="deleteProduct(${product.ProductID}, '${product.ProductName.replace(/'/g, "\\'")}'); return false;"
                                title="Delete Product">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </td>
                </tr>
            `;
            container.append(html);
            No++; // Increment product number
        });
    }

    

    // Load categories for dropdowns
    $(document).ready(function() {
        $.ajax({
            url: '/Category?handler=AllCategory',
            type: 'GET',
            success: function(data) {
                const categorySelect = $('#categoryId, #categoryFilter');
                categorySelect.empty();
                categorySelect.append('<option value="">Select Category</option>');

                data.forEach(category => {
                    categorySelect.append(
                        `<option value="${category.categoryID}">${category.categoryName}</option>`
                    );
                });
            },
            error: function() {
                console.error('Failed to load categories.');
                alert('Failed to load categories. Please refresh the page.');
            }
        });
    });

    // Clear and reset form
    function clearForm() {
        const form = document.getElementById('productForm');
        form.reset();
        form.classList.remove('was-validated');

        // Clear validation states
        $(form).find('.is-invalid').removeClass('is-invalid');
        $(form).find('.invalid-feedback').hide();

        // Reset form fields
        document.getElementById('productId').value = '0';
        document.getElementById('productModalLabel').textContent = 'Add New Product';

        // Hide image preview
        const imagePreview = document.getElementById('imagePreview');
        if (imagePreview) {
            imagePreview.style.display = 'none';
        }

        const previewImg = document.getElementById('previewImg');
        if (previewImg) {
            previewImg.src = '';
        }
    }

    // Edit product - load data into form
    function editProduct(productID) {
        if (!productID) {
            alert('Invalid product ID');
            return;
        }

        // Reset form and validation state
        const form = document.getElementById('productForm');
        form.reset();
        form.classList.remove('was-validated');
        $(form).find('.is-invalid').removeClass('is-invalid');

        // Update modal title and hide preview
        $('#productModalLabel').text('Edit Product');
        $('#imagePreview').hide();
        $('#previewImg').attr('src', '');

        // Show loading state
        const modal = new bootstrap.Modal(document.getElementById('productModal'));
        modal.show();

        // Add loading spinner to modal body
        const modalBody = $('#productModal .modal-body');
        const originalContent = modalBody.html();
        modalBody.html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading...</div>');

        // Load product details
        $.ajax({
            url: `?handler=ProductDetail&productId=${productID}`,
            type: 'GET',
            success: function(data) {
                // Restore original content
                modalBody.html(originalContent);

                if (!data) {
                    alert('No product data found.');
                    modal.hide();
                    return;
                }

                // Populate form fields
                $('#productId').val(data.productID);
                $('#productName').val(data.productName);
                $('#categoryId').val(data.categoryID);
                $('#description').val(data.description);
                $('#price').val(data.price);
                $('#stockQuantity').val(data.stockQuantity);
                $('#createdDate').val(new Date(data.createdDate).toISOString().slice(0, 16)); // Format for datetime-local
                $('#isAvailable').prop('checked', data.isAvailable);

                // Show image preview if exists
                if (data.imageURL) {
                    $('#previewImg').attr('src', '/' + data.imageURL);
                    $('#imagePreview').show();
                }
            },
            error: function(xhr, status, error) {
                modalBody.html(originalContent);
                console.error('Error loading product:', error);
                alert('Failed to load product details. Please try again.');
                modal.hide();
            }
        });
    }

    // Form submission handler
    $('#productForm').on('submit', function (e) {
        e.preventDefault();

        const form = this;
        const formData = new FormData(form);
            const dateValue = formData.get("CreatedDate");
    console.log("date:", dateValue, typeof dateValue);

        const isAvailable = formData.get("IsAvailable") === "on"; // bool true/false

    // Gán lại cho FormData (nếu vẫn dùng FormData)
    formData.set("IsAvailable", isAvailable); // Vẫn là bool, NHƯNG FormData sẽ auto .toString()

    console.log(isAvailable); // <-- Đây mới là bool thật
        const productId = document.getElementById("productId").value;
        const page = sessionStorage.getItem('currentPage') || 1;

        // Disable submit button to prevent double submission
        const submitBtn = $(form).find('button[type="submit"]');
        const originalText = submitBtn.html();
        submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Processing...');

        const isEdit = productId != 0;
        const handler = isEdit ? 'Update' : 'Create';
        const successMessage = isEdit ? 'Product updated successfully!' : 'Product created successfully!';
        const errorMessage = isEdit ? 'Error updating product.' : 'Error creating product.';

        $.ajax({
            url: `?handler=${handler}`,
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                alert(successMessage);
                $('#productModal').modal('hide');
                loadProducts(page);
            },
            error: function (xhr, status, error) {
                console.error('Form submission error:', error);
                alert(errorMessage + ' Please try again.');
            },
            complete: function() {
                // Re-enable submit button
                submitBtn.prop('disabled', false).html(originalText);
            }
        });
    });

    // View product details in modal
    function viewProduct(productID) {
        if (!productID) {
            alert('Invalid product ID');
            return;
        }

        $.ajax({
            url: `?handler=ProductDetail&productId=${productID}`,
            type: 'GET',
            success: function(data) {
                if (!data) {
                    alert('No product data found.');
                    return;
                }

                const content = `
                    <div class="row">
                        <div class="col-md-4">
                            <div class="text-center">
                                <img src="/${data.imageURL || 'assets/images/default-product.jpg'}"
                                     alt="${data.productName}"
                                     class="img-fluid rounded shadow"
                                     style="max-height: 300px; object-fit: cover;"
                                     onerror="this.src='assets/images/default-product.jpg'">
                            </div>
                        </div>
                        <div class="col-md-8">
                            <h4 class="mb-3">${data.productName}</h4>
                            <p class="text-muted mb-4">${data.description || 'No description available'}</p>
                            <hr>
                            <div class="row g-3">
                                <div class="col-sm-6">
                                    <strong>Category:</strong>
                                    <span class="text-primary">${data.category.categoryName}</span>
                                </div>
                                <div class="col-sm-6">
                                    <strong>Price:</strong>
                                    <span class="text-success fs-5">$${data.price}</span>
                                </div>
                                <div class="col-sm-6">
                                    <strong>Stock Quantity:</strong>
                                    <span class="badge ${data.stockQuantity > 0 ? 'bg-success' : 'bg-danger'}">
                                        ${data.stockQuantity}
                                    </span>
                                </div>
                                <div class="col-sm-6">
                                    <strong>Created Date:</strong>
                                    <span class="text-muted">${new Date(data.createdDate).toLocaleDateString()}</span>
                                </div>
                                <div class="col-sm-12">
                                    <strong>Status:</strong>
                                    <span class="badge ${data.isAvailable ? 'bg-success' : 'bg-secondary'} ms-2">
                                        <i class="fas ${data.isAvailable ? 'fa-check' : 'fa-times'}"></i>
                                        ${data.isAvailable ? 'In Stock' : 'Out of Stock'}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                document.getElementById('viewProductContent').innerHTML = content;
                const modal = new bootstrap.Modal(document.getElementById('viewProductModal'));
                modal.show();
            },
            error: function(xhr, status, error) {
                console.error('Error loading product details:', error);
                alert('Failed to load product details. Please try again.');
            }
        });
    }

    // Delete product with confirmation
    function deleteProduct(productId, productName) {
        if (!productId) {
            alert('Invalid product ID');
            return;
        }

        // Escape product name for safe display
        const safeName = productName.replace(/"/g, '&quot;');

        if (confirm(`Are you sure you want to delete the product "${safeName}"?\n\nThis action cannot be undone.`)) {
            // Show loading state
            const deleteBtn = $(`button[onclick*="deleteProduct(${productId}"]`);
            const originalHtml = deleteBtn.html();
            deleteBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i>');

            $.ajax({
                url: `?handler=Delete&productId=${productId}`,
                type: 'GET',
                success: function(response) {
                    alert('Product has been deleted successfully!');
                    const page = sessionStorage.getItem('currentPage') || 1;
                    loadProducts(page);
                },
                error: function(xhr, status, error) {
                    console.error('Delete error:', error);
                    alert('Failed to delete product. Please try again.');
                },
                complete: function() {
                    // Restore button state
                    deleteBtn.prop('disabled', false).html(originalHtml);
                }
            });
        }
    }

        function renderPagination(totalPages, currentPage) {
        const pagination = $('.pagination');
        pagination.empty();

        // Don't show pagination if only one page
        if (totalPages <= 1) return;

        // Add modern styling classes
        pagination.addClass('modern-pagination d-flex justify-content-center align-items-center gap-2');

        // Previous button with modern design
        const isPrevDisabled = currentPage === 1;
        pagination.append(`
            <li class="page-item prev-btn ${isPrevDisabled ? 'disabled' : ''}">
                <a class="page-link modern-nav-btn ${isPrevDisabled ? 'disabled' : ''}"
                   href="#"
                   data-page="${currentPage - 1}"
                   title="Previous Page"
                   ${isPrevDisabled ? 'tabindex="-1"' : ''}>
                    <i class="fas fa-chevron-left"></i>
                    <span class="nav-text d-none d-md-inline ms-1">Previous</span>
                </a>
            </li>
        `);

        // Smart pagination logic - show max 7 pages for better UX
        const maxVisiblePages = 4;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        // Adjust start page if we're near the end
        if (endPage - startPage < maxVisiblePages - 1) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        // First page with ellipsis logic
        if (startPage > 1) {
            pagination.append(`
                <li class="page-item">
                    <a class="page-link modern-page-btn" href="#" data-page="1">1</a>
                </li>
            `);

            if (startPage > 2) {
                pagination.append(`
                    <li class="page-item">
                        <span class="page-link modern-ellipsis">
                            <i class="fas fa-ellipsis-h"></i>
                        </span>
                    </li>
                `);
            }
        }

        // Main page numbers
        for (let i = startPage; i <= endPage; i++) {
            const isActive = i === currentPage;
            pagination.append(`
                <li class="page-item ${isActive ? 'active' : ''}">
                    <a class="page-link modern-page-btn ${isActive ? 'active' : ''}"
                       href="#"
                       data-page="${i}"
                       ${isActive ? 'aria-current="page"' : ''}>
                        ${i}
                    </a>
                </li>
            `);
        }

        // Last page with ellipsis logic
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                pagination.append(`
                    <li class="page-item">
                        <span class="page-link modern-ellipsis">
                            <i class="fas fa-ellipsis-h"></i>
                        </span>
                    </li>
                `);
            }

            pagination.append(`
                <li class="page-item">
                    <a class="page-link modern-page-btn" href="#" data-page="${totalPages}">${totalPages}</a>
                </li>
            `);
        }

        // Next button with modern design
        const isNextDisabled = currentPage === totalPages;
        pagination.append(`
            <li class="page-item next-btn ${isNextDisabled ? 'disabled' : ''}">
                <a class="page-link modern-nav-btn ${isNextDisabled ? 'disabled' : ''}"
                   href="#"
                   data-page="${currentPage + 1}"
                   title="Next Page"
                   ${isNextDisabled ? 'tabindex="-1"' : ''}>
                    <span class="nav-text d-none d-md-inline me-1">Next</span>
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
        `);

        // Page info indicator (optional - can be hidden on mobile)
        pagination.append(`
            <li class="page-item page-info d-none d-lg-block ms-3">
                <span class="page-link modern-info">
                    <i class="fas fa-info-circle me-1"></i>
                    Page ${currentPage} of ${totalPages}
                </span>
            </li>
        `);

        // Modern event binding with smooth transitions
        $('.page-link').off('click.pagination').on('click.pagination', function (e) {
            e.preventDefault();

            const $this = $(this);
            const page = parseInt($this.data('page'));

            // Ignore clicks on disabled buttons or ellipsis
            if ($this.hasClass('disabled') || $this.hasClass('modern-ellipsis') || isNaN(page) || page === currentPage) {
                return;
            }

            // Add loading state
            $this.addClass('loading');
            $this.find('i').addClass('fa-spin');

            // Store current page
            const currentPageData = {
                page: page,
                searchTerm: $('#searchInput').val() || '',
                category: $('#categoryFilter').val() || '',
                status: $('#statusFilter').val() || '',
                timestamp: Date.now()
            };

            // Use modern storage approach (remove sessionStorage dependency)
            window.paginationState = currentPageData;
            sessionStorage.setItem('currentPage', page);
            console.log(`🚀 Loading page ${page}`, currentPageData);

            // Smooth page transition
            setTimeout(() => {
                loadProducts(page);

                // Remove loading state after a brief delay
                setTimeout(() => {
                    $('.page-link').removeClass('loading');
                    $('.page-link i').removeClass('fa-spin');
                }, 300);
            }, 150);
        });

        // Add keyboard navigation
        pagination.on('keydown.pagination', '.page-link', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                $(this).click();
            }
        });
    }

    // Optional: Add modern CSS styles (can be added to your CSS file)
    const modernPaginationStyles = `
    <style>
    .modern-pagination {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        --primary-color: #3b82f6;
        --primary-hover: #2563eb;
        --secondary-color: #6b7280;
        --border-color: #e5e7eb;
        --hover-bg: #f3f4f6;
        --active-bg: var(--primary-color);
        --disabled-color: #9ca3af;
        --border-radius: 8px;
        --transition: all 0.2s ease-in-out;
    }

    .modern-page-btn, .modern-nav-btn {
        border: 1px solid var(--border-color) !important;
        border-radius: var(--border-radius) !important;
        padding: 8px 12px !important;
        margin: 0 2px !important;
        transition: var(--transition) !important;
        font-weight: 500 !important;
        color: var(--secondary-color) !important;
        background: white !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1) !important;
    }

    .modern-page-btn:hover:not(.disabled):not(.active),
    .modern-nav-btn:hover:not(.disabled) {
        background: var(--hover-bg) !important;
        border-color: var(--primary-color) !important;
        color: var(--primary-color) !important;
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
    }

    .modern-page-btn.active {
        background: var(--active-bg) !important;
        border-color: var(--primary-color) !important;
        color: white !important;
        box-shadow: 0 2px 8px rgba(59,130,246,0.3) !important;
    }

    .modern-nav-btn.disabled {
        color: var(--disabled-color) !important;
        cursor: not-allowed !important;
        opacity: 0.5;
    }

    .modern-ellipsis {
        border: none !important;
        background: transparent !important;
        color: var(--secondary-color) !important;
        cursor: default !important;
        padding: 8px 4px !important;
    }

    .modern-info {
        background: var(--hover-bg) !important;
        border: 1px solid var(--border-color) !important;
        border-radius: var(--border-radius) !important;
        color: var(--secondary-color) !important;
        font-size: 0.875rem !important;
        cursor: default !important;
    }

    .page-link.loading {
        pointer-events: none;
        opacity: 0.7;
    }

    .nav-text {
        font-size: 0.875rem;
    }

    </style>
    `;

    // Inject styles if not already present
    if (!document.querySelector('#modern-pagination-styles')) {
        const styleElement = document.createElement('div');
        styleElement.id = 'modern-pagination-styles';
        styleElement.innerHTML = modernPaginationStyles;
        document.head.appendChild(styleElement);
    }
</script>